@page "/salaried"

@using Data

@if (dataRecords == null)
{
	<p><em>Loading...</em></p>
}
else
{
	
	<div class="flex buttons">
		<Button OnClick=@OnNewClick><span class="material-icons">add</span></Button>
		<Button OnClick=@OnPrint><span class="material-icons">print</span></Button>
		<Button OnClick=@OnExport><span class="material-icons">get_app</span></Button>

        <Button OnClick=@OnGridView class="@gridViewButtonClass"><span class="material-icons">reorder</span></Button>
        <Button OnClick=@OnCardView class="@cardViewButtonClass"><span class="material-icons">view_module</span></Button>
	</div>

    <div hidden="@isCardView">
	    <Grid @ref="mainGrid" Style="width: 100%; height:100%; margin-bottom: 40px;"
	    	  OnReady="OnGridReady" OnChange=@OnChange DataSource="@dataRecords"
	    	  Sorting="@sorting" Selection="@selection" Editing="@editing" Paging="@paging" Pager="@pager">
	    	<Columns>
	    		<Column DataField="FirstName" Label="First Name"></Column>
	    		<Column DataField="LastName" Label="Last Name"></Column>
	    		<Column DataField="ProductName" Label="Product Name"></Column>
	    		<Column DataField="Price" Label="Price" CellsFormat="c2" Editor="numberEditor"></Column>
	    		<Column DataField="Quantity" Label="Quantity" Editor="numberEditor"></Column>
	    		<Column DataField="TimeOfPurchase" Label="Time Of Purchase" CellsFormat="d" Editor="dateEditor"></Column>
	    	</Columns>
	    </Grid>
    </div>
    <div hidden="@isGridView">
        <CardView CoverField="Attachments" TitleField="FirstName" 
			DataSource=@dataRecords Columns=@kanbanColumns Collapsible="true" 
			Editable=true CardHeight="440" CoverMode="coverMode">
        </CardView>
    </div>
    <div hidden="@isGridView" class="name">@selectedName</div>
	<div class="flex">
		<div hidden="@isCardView" class="person-info">
			<div class="name">@selectedName</div>
			<div class="flex">
		        <div><img src="@imageSource"/></div>
		    <div>
			<div class="label">Product:</div>
			<div class="value">@selectedProduct</div>
			<div class="label">Quantity:</div>
			<div class="value">@selectedQuantity</div>
			<div class="label">Country:</div>
			<div class="value">@selectedCountry</div>
		</div>
			</div>
		</div>
		<div style="width: 100%;">
		<Tabs>
			<TabItem Label="Subscriptions">
			<Grid @ref="billingGrid" DataSource=billingRecords Sorting="@sorting">
				<Columns>
					<Column DataField="Date" Label="Date"></Column>
					<Column DataField="Amount" Label="Amount"></Column>
					<Column DataField="Description" Label="Description"></Column>
					<Column DataField="Status" Label="Status"></Column>
				</Columns>
			</Grid>
		</TabItem>
		<TabItem Label="Stocks">
			<Grid @ref="stockGrid" DataSource=@stockRecords Sorting="@sorting">
				<Columns>
					<Column DataField="Code" Label="Code"></Column>
					<Column DataField="Buy" Label="Buy Price"></Column>
					<Column DataField="Volume" Label="Volume"></Column>
					<Column DataField="Date" Label="Date"></Column>
				</Columns>
			</Grid>
		</TabItem>		
			</Tabs>
		</div>
	</div>
}

<style>
	.name {
		color: #005c99;
		font-size: 25px;
	}

	.flex {
		display: flex;
		justify-content: space-between;
	}

	.person-info {
		width: 380px;
	}

	.person-info .flex {
		justify-content: flex-start;
	}

	.person-info .name {
		margin-bottom: 20px;
	}

	img {
		width: 125px;
		margin-right: 5px;
	}

	.label, .value {
		font: 14px "Segoe UI", "Helvetica Neue", "Droid Sans", Arial, Tahoma, Geneva, Sans-serif;
	}

	.label {	
		color: grey;		
		font-weight: 700;
		text-transform: uppercase;
	}
	.value {
		margin-bottom: 10px;
	}

	smart-tabs {
		width: 100%;
		height: 285px;
	}

		smart-tabs smart-grid {
            width: 100%;
			height: auto;
		}

	.buttons {
		width: 310px;
		margin-bottom: 15px;
	}

	smart-card-view {
		width: 100%;
		height: auto;
		margin-bottom: 20px;
	}

	smart-card {
		border: none !important;
	}

	smart-button {
		border-radius: 0;
	}

	.smart-grid-dialog .col-sm-6 {
		max-width: 100%;
	}

	.smart-grid-dialog-editor {
		max-width: 200px !important;
	}

	.smart-grid-dialog .smart-footer .smart-stack-layout {
		justify-content: center;
	}

	.smart-arrow-up:after {
    	top: -4px;
	}
</style>

@code {
    private bool isGridView {get;set;} = true;
    private bool isCardView {get;set;} = false;
	private string gridViewButtonClass {get; set;} = "smart-element smart-button primary";
	private string cardViewButtonClass {get; set;} = "material-icons";
	private CardViewCoverMode coverMode = CardViewCoverMode.Crop;
    private Grid mainGrid;
    private Grid billingGrid;
    private Grid stockGrid;
    private string numberEditor = "numberInput";
    private string dateEditor = "dateTimePicker";

    GridSorting sorting = new GridSorting() { Enabled = true };
    static Dialog dialog = new Dialog()
    {
        Enabled = true,
        Width = 500
    };
    static Dialog addDialog = new Dialog()
    {
        Enabled = true,
        Width = 500
    };

    static GridEditingCommandColumn commandColumn = new GridEditingCommandColumn()
    {
        Visible = true,
        Position = Position.Far
    };
    GridSelection selection = new GridSelection()
    {
        Enabled = true,
        Mode = GridSelectionMode.One
    };
    GridEditing editing = new GridEditing()
    {
        Enabled = true,
        Mode = GridEditingMode.Row,
        Dialog = dialog,
        CommandColumn = commandColumn,
        AddDialog = addDialog
    };
    GridPaging paging = new GridPaging()
    {
        Enabled = true,
        PageSize = 4
    };
    static GridPagerSummary pagerSummary = new GridPagerSummary()
    {
        Visible = true
    };
    GridPager pager = new GridPager()
    {
        Visible = true,
        Summary = pagerSummary
    };

    IEnumerable<ICardViewColumn> kanbanColumns = new List<CardViewColumn>()
    {
        new CardViewColumn()
		{
			Label = "First Name",
			DataField = "FirstName",
			Icon = "firstName"
		},
        new CardViewColumn()
		{
			Label = "Last Name",
			DataField = "LastName",
			Icon = "lastName"
		},
        new CardViewColumn()
		{
			Label = "Birthday",
			DataField = "Birthday",
			Icon = "birthday"
		},
		new CardViewColumn()
		{
			Label = "Product Name",
			DataField = "ProductName",
			Icon = "ProductName"
		},
		new CardViewColumn()
		{
			Label = "Attachments",
			DataField = "Attachments",
			Icon = "attachments",
			Image = true
		}
    };

    private DataService dataService = new DataService();
    private List<DataRecord> dataRecords;
    private List<BillingRecord> billingRecords;
    private List<StockRecord> stockRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(8);
        billingRecords = dataService.GenerateBillingData(6);
        stockRecords = dataService.GenerateStockData(6);
    }

    private string selectedName;
    private string selectedProduct;
    private string selectedQuantity;
    private string selectedCountry;
	private string imageSource;

    private void OnGridReady(Grid grid) 
	{
		mainGrid.Select(0);
	}

    private void OnNewClick()
    {
        mainGrid.AddNewRow("far");
    }

    private void OnPrint()
    {
        mainGrid.Print();
    }

    private void OnExport()
    {
        mainGrid.ExportData("xlsx");
    }

    private void OnCardView()
	{
        isGridView = false;
        isCardView = true;
		gridViewButtonClass = "smart-element smart-button";
		cardViewButtonClass = "smart-element smart-button primary";
		StateHasChanged();
	}

    private void OnGridView()
	{
        isGridView = true;
        isCardView = false;
		gridViewButtonClass = "smart-element smart-button primary";
		cardViewButtonClass = "smart-element smart-button";
		StateHasChanged();
	}

    private async void OnChange(Event eventObj)
    {		
        GridChangeEventDetail detail = eventObj["Detail"];
        IEnumerable<object> selection = await this.mainGrid.GetSelectedRows();    

		int selectedId = int.Parse(selection.First().ToString());
        DataRecord selectedRowData = dataRecords[selectedId];

        selectedName = selectedRowData.FirstName + " " + selectedRowData.LastName;
        selectedProduct = selectedRowData.ProductName;
        selectedQuantity = selectedRowData.Quantity.ToString();
        selectedCountry = selectedRowData.Country;
		imageSource = "./images/phonebook/" + selectedRowData.FirstName.ToLower() + ".png";
		StateHasChanged();
        
        billingGrid.DataSource = dataService.GenerateBillingData(6);
        stockGrid.DataSource = dataService.GenerateStockData(6);
        
        billingGrid.Refresh();
        stockGrid.Refresh();    		
    }
}