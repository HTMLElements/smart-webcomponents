@page "/"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<div @ref="divRef" style="height:1000px">
    @if (dataRecords != null) {
    
        <Grid  @ref="grid"
            DataSource="dataRecords" 
            Selection="@selection"
            OnReady= "@onReadyCallback"
            OnChange="@onChangeCallback" 
           
          >
            <Columns>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number"
                        Align="Smart.Blazor.HorizontalAlignment.Right" CellsAlign="Smart.Blazor.HorizontalAlignment.Right">
                </Column>
                <Column DataField="Price" Label="Unit Price" DataType="number" 
                        Align="Smart.Blazor.HorizontalAlignment.Right" CellsAlign="Smart.Blazor.HorizontalAlignment.Right" CellsFormat="c2">
                </Column>
                <Column DataField="Total" Label="Total" DataType="number"
                        Align="Smart.Blazor.HorizontalAlignment.Right" CellsAlign="Smart.Blazor.HorizontalAlignment.Right" CellsFormat="c2">
                </Column>
            </Columns>
        </Grid>
        <br>
        <Tree 
            DataSource="@treeDataSource" 
            SelectedIndexes="@selectedTreeItems" 
            ScrollMode="TreeScrollMode.Scrollbar" 
            SelectionMode="TreeSelectionMode.OneOrMany" +
            OnChange="@treeOnChange"
            ShowLines>
        </Tree>
    }
</div>
@code {

    string[] selectedTreeItems  = new string []
    {
        "0.1", "0.2" , "1.3" 
    };


 private List<Dictionary<string, object>> treeDataSource = new List<Dictionary<string, object>>()
    {
        new Dictionary<string, object>()
        {
            { "label", "Cats" },
            { "expanded", true },
            {
                "items",
                new List<Dictionary<string, object>>()
                {
                    new Dictionary<string, object>() { { "label", "Tiger" },  },
                    new Dictionary<string, object>() { { "label", "Lion" } },
                    new Dictionary<string, object>() { { "label", "Jaguar" } },
                    new Dictionary<string, object>() { { "label", "Leopard" } },
                    new Dictionary<string, object>() { { "label", "Serval" } },
                    new Dictionary<string, object>() { { "label", "Domestic cat" } }
                }
            }
        },
        new Dictionary<string, object>()
        {
            { "label", "Dogs" },
            { "expanded", true },
            {
                "items",
                new List<Dictionary<string, object>>()
                {
                    new Dictionary<string, object>() { { "label", "Gray wolf" } },
                    new Dictionary<string, object>() { { "label", "Ethiopian wolf" }, },
                    new Dictionary<string, object>() { { "label", "Arctic fox" },  },
                    new Dictionary<string, object>() { { "label", "Dingo" } },
                    new Dictionary<string, object>() { { "label", "Domestic dog" },  }
                }
            }
        }
    };

    ElementReference divRef;

    public Grid grid;

    GridSelection selection = new GridSelection()
    {
        Enabled = true,
        Mode = GridSelectionMode.One,
        CheckBoxes = new GridSelectionCheckBoxes()
        {  
            Enabled = false
        }
    };
    private List<DataRecord> dataRecords;

    private async void onChangeCallback (Event eventObj)
    {
        GridChangeEventDetail detail = eventObj["Detail"];
  
        Console.WriteLine(detail.Started);
  
      
        IEnumerable<object> selectedRow = await grid.GetSelectedRows();
        
        foreach (var v in selectedRow)
        {
             Console.WriteLine(v);
        }
       
    }
    private void treeOnChange (Event eventObj) 
    {
        TreeChangeEventDetail detail = eventObj["Detail"];
    }
    
    private void onReadyCallback (Grid grid) {

        int selectionIndex = 1;

        string dataField = "firstName";

        grid.Select(selectionIndex, dataField);
     }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(3000);

    }
}